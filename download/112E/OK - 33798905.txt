#include <algorithm>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <string.h>
#include <stack>
#define Endl endl
#define mp make_pair
#define rep(N) for(int i=0;i<N;i++)
#define repj(N) for(int j=0;j<N;j++)
#define ll long long 
#define pii pair<int,int>
#define For(I,N) for(int I=0;I<N;I++)
#define cinone(N) int N;cin>>N;
#define scanfone(N) int N;cin>>N;
#define cingroup(N,M) int N[M];for(int yiuytvnm=0;yiuytvnm<M;yiuytvnm++) cin>>N[yiuytvnm];
#define scanfgroup(N,M) int N[M];for(int qrwuoiq=0;qrwuoiq<M;qrwuoiq++) scanf("%d",&N[qrwuoiq]);
typedef unsigned long long ull;
using namespace std;
const int dx[]={0,1,0,-1,0};
const int dy[]={1,0,-1,0,0};
int n,m;
ll neigh[50];
ll sum[50];
ll goal;
int best=45908;

bool in(int x,int y)
{
	return x<n && y<m && x>=0 && y>=0;
}

void dfs(int x,int now,ll mask)
{
//	cout<<x<<' '<<now<<' '<<mask<<endl;
	if(now>=best) return;
//	cout<<sum[x]<<' '<<goal<<' '<<goal<<endl;
	if((mask|sum[x])!=goal) return;
	if(x==n*m) return (void)(best=now);
	dfs(x+1,now+1,mask|neigh[x]);
	dfs(x+1,now,mask);
}

int main()
{
//	freopen("input.txt","r",stdin);
	cin>>n>>m;
	goal=(1LL<<(n*m))-1;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			int t=i*m+j;
			for(int k=0;k<5;k++)
			{
				int nx=i+dx[k];
				int ny=j+dy[k];
				if(!in(nx,ny)) continue;
				int tk=nx*m+ny;
				neigh[t]|=1LL<<tk;
			}
		}
	}
	sum[n*m-1]=neigh[n*m-1];
	for(int i=n*m-2;i>=0;i--)
	{
		sum[i]=sum[i+1]|neigh[i];
	}
	dfs(0,0,0LL);
	cout<<n*m-best<<endl;
	return 0;
}

